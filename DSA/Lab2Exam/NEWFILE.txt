// EVAL POSTFIX


#include<iostream>
using namespace std;


int isOperator(char ch) {
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/')
        return 1;
    return 0;
}
int calculate(char ch,int a,int b) {
    if(ch == '+') {
        return a + b;
    } else if(ch == '-') 
        return a - b;
    else if(ch == '*')  
        return a * b;
    else if(ch == '/')
        return a / b;

    return a  + b;
}

void evaluateExpression(string exp[],int count) {
    int stack[20];
    int stackP = -1;
    cout<<count;
    for(int i=0;i<count;i++) {
        if(exp[i].length() == 1 && isOperator(exp[i][0])) {
            int b = stack[stackP--];
            int a = stack[stackP--];

            stack[++stackP] = calculate(exp[i][0], a, b);
        } else{
            stack[++stackP] = stoi(exp[i]);
        }
    }

    cout<<"\nExpression:"<<stack[0];
}
int main() {
    string exp;

    getline(cin,exp);

    string expArr[30];
    int count = 0;
    string tempStr;
    for(int i=0;i<exp.length();i++) {
        if(exp[i] == ' ') {
            expArr[count++] = tempStr;
            tempStr = "";
        } else {
            tempStr += exp[i];
        }
    }
    expArr[count++] = tempStr;
    evaluateExpression(expArr,count);
    cout<<endl;
}


// EVAL PREFIX
#include<iostream>
using namespace std;

int isOperator(char ch) {
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/') 
        return 1;
    return 0;
}
int add(char ch,int a,int b) {
    if(ch == '+')
        return a + b;
    else if(ch == '-')
        return a - b;
    else if(ch == '*')
        return a * b;
    else if(ch == '/')
        return a / b;

    return a + b;
}

void evaluate(string str[],int count) {
    int stack[10];
    int stackP = -1;

    for(int i=count-1;i>=0;i--) {
        if(isOperator(str[i][0])) {
            int a = stack[stackP--];
            int b = stack[stackP--];

            stack[++stackP] = add(str[i][0],a,b);            
        } else {
            stack[++stackP] = stoi(str[i]);
        }
    }

    cout<<"\nExpr:"<<stack[0]<<"\n";
}

int main() {
    string exp;
    getline(cin,exp);

    string tempStr;
    string strArr[20];
    int count = 0;
    for(int i=0;i<exp.length();i++) {
        if(exp[i] == ' ') {
            strArr[count++] = tempStr;
            tempStr = "";
        } else {
            tempStr+= exp[i];
        }
    }
    strArr[count++] = tempStr;
    for(int i=0;i<count;i++)
        cout<<strArr[i]<<"-";

    evaluate(strArr,count);
}



// POSTFIX:

#include<iostream>
using namespace std;

int checkPriority(char ch) {
    if(ch == '^') 
        return 3;
    else if(ch == '*' || ch == '/')
        return 2;
    else if(ch == '+' || ch == '-')
        return 1;
    else 
        return 0;
}

int isSpecialChar(char ch) {
    if((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122))
        return 0;
    return 1;
}

void evaluateExp(char exp[]) {
    char stack[30],postFix[30];
    int sPoint=-1,pPoint=-1;

    for(int i=0;exp[i] != '\0';i++) {
        if(exp[i] == '(') {
            stack[++sPoint] = exp[i];
        } else if(exp[i] == ')') {
            while(stack[sPoint] != '(' && sPoint > -1) {
                postFix[++pPoint] = stack[sPoint--];
            }
            sPoint--;
        } else if (isSpecialChar(exp[i])) {
            while (checkPriority(stack[sPoint]) >= checkPriority(exp[i]) && sPoint > -1 && stack[sPoint] != '(') {
                postFix[++pPoint] = stack[sPoint--];
            }
            stack[++sPoint] = exp[i];
        } else {
            postFix[++pPoint]=exp[i];
        }


        cout<<"\n\n"<<exp[i]<<"\t";
        for(int i=0;i<=sPoint;i++) 
            cout<<stack[i];
        cout<<"\t";
        for(int i=0;i<=pPoint;i++) 
            cout<<postFix[i];
            
    }
    while(stack[sPoint] > -1) {
        postFix[++pPoint] = stack[sPoint--];
    }
    postFix[++pPoint] = '\0';

    cout<<"\nExpresssion:"<<postFix<<"\n\n";
}

int main(){
    char arr[30];

    cout<<"Enter Expression:";
    cin>>arr;

    evaluateExp(arr);
}


//PREFIX

#include<iostream>
using namespace std;

int checkPriority(char ch) {
    if(ch == '^') 
        return 3;
    else if(ch == '*' || ch == '/')
        return 2;
    else if(ch == '+' || ch == '-')
        return 1;
    else 
        return 0;
}

int isSpecialChar(char ch) {
    if((ch >= 48 && ch <= 57) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122))
        return 0;
    return 1;
}

void evaluateExp(char exp[]) {
    char stack[30],postFix[30];
    int sPoint=-1,pPoint=-1;
    int n;
    for(n=0;exp[n] != '\0';n++);
    
    cout<<"\n"<<n<<"\n";

    for(int i=n-1;i>=0;i--) {
        if(exp[i] == ')') {
            stack[++sPoint] = exp[i];
        } else if(exp[i] == '(') {
            while(stack[sPoint] != ')' && sPoint > -1) {
                postFix[++pPoint] = stack[sPoint--];
            }
            sPoint--;
        } else if(isSpecialChar(exp[i])) {
            while (checkPriority(exp[i]) < checkPriority(stack[sPoint]) && stack[sPoint] != ')' && sPoint > -1) {
                postFix[++pPoint] = stack[sPoint--];
            }
            stack[++sPoint] = exp[i];
        } else {
            postFix[++pPoint] = exp[i];
        }

        cout<<"\n\n"<<exp[i]<<"\t";

        for(int i=sPoint;i>=0;i--)
            cout<<stack[i];
        
        cout<<"\t";

        for(int i=pPoint;i>=0;i--)
            cout<<postFix[i];
        cout<<"\t";
    }

    while(stack[sPoint] != ')' && sPoint > -1) {
        postFix[++pPoint] = stack[sPoint--];
    }
    postFix[++pPoint] = '\0';

    cout<<"\n\nExpression:";
    for(int i=pPoint;i>=0;i--) {
        cout<<postFix[i];
    }

    cout<<"\n\n";
}

int main(){
    char arr[30];

    cout<<"Enter Expression:";
    cin>>arr;

    evaluateExp(arr);
}
 


//  QUEUE
#include<iostream>
using namespace std;
void enQueue(int queue[],int &rear,int size) {
    if(rear == size) {
        cout<<"Queue is full";
    } else {
        cout<<"Enter element:";
        cin>>queue[rear++];
    }
}

void deQueue(int queue[],int rear,int &front) {
    if(rear == front) { 
        cout<<"Queue is empty";
    } else {
        cout<<"Element:"<<queue[front++]<<"deleted";
    }
}
void display(int queue[],int &rear,int &front) {
    cout<<"\n\n";
    for(int i=front;i<rear;i++) {
        cout<<queue[i]<<" ";
    }
}
int main() {
    int n,rear=0,front=0;
    cout<<"Enter the value of n:";
    cin>>n;

    int queue[n];
    int choice;
    do {
        cout<<"\n1.EnQueue\n2.DeQueue\n3.Display\n4.Exit";
        cin>>choice;

        if(choice == 1) 
            enQueue(queue,rear,n);
        else if(choice == 2)
            deQueue(queue,rear,front);
        else if(choice == 3) 
            display(queue,rear,front);
    } while(choice != 4);
}


//STACK
#include<iostream>
using namespace std;

void push(int arr[],int &top,int size) {
    if(top == size) 
        cout<<"Stack is Full";
    else {
        int element ;
        cout<<"Enter element:";
        cin>>element;
        arr[top++] = element;
    }  
}
void pop(int arr[],int &top) {
    if(top == 0)
        cout<<"Stack is empty";
    else {
        cout<<"Element:"<<arr[--top]<<":deleted";
    }
}

int main() {
    system("clear");
    int n,top=0;
    cout<<"Enter size of array:";
    cin>>n;

    int arr[n];
    int choice;
    do{
        cout<<"\n1.Push\n2.Pop\n3.Exit";
        cin>>choice;

        if(choice == 1) {
            push(arr,top,n);
        } else if(choice == 2) {
            pop(arr,top);
        } 
    } while(choice != 3);
}