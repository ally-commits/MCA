MERGE SORT:
#include <iostream>
using namespace std;

void merge(int arr[], int low, int high, int mid)
{
    int i, j, k, c[50];
    i = low;
    k = low;
    j = mid + 1;
    while (i <= mid && j <= high) {
        if (arr[i] < arr[j]) {
            c[k] = arr[i];
            k++;
            i++;
        } else {
            c[k] = arr[j];
            k++;
            j++;
        }
    }
    while (i <= mid) {
        c[k] = arr[i];
        k++;
        i++;
    }
    while (j <= high) {
        c[k] = arr[j];
        k++;
        j++;
    }
    for (i = low; i < k; i++) {
        arr[i] = c[i];
    }
}

void merge_sort(int arr[], int low, int high) {
    int mid;
    if (low < high) { 
        mid = (low + high) / 2;
        merge_sort(arr, low, mid);
        merge_sort(arr, mid + 1, high); 
        merge(arr, low, high, mid);
    }
} 
 
int main() {
    int arr[30], n;
    cout << "Enter value of n:";
    cin >> n;
    cout << "Enter Array elements:";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    merge_sort(arr, 0, n - 1);
    cout << "Sorted array\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    cout<<endl;
}


SEQUENTAIL SEARCH:
#include <iostream>
using namespace std;

int search(int arr[], int n, int x) {
    int i;
    for (i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}
 
int main() {
    int arr[30], n,ele;
    cout << "Enter value of n:";
    cin >> n;

    cout << "Enter Array elements:";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout<<"Enter Search Element:";
    cin>>ele;

    int result = search(arr, n, ele);
    if (result == -1)
        cout << "Element not Found:";
    else
        cout << "Element Found at index " << result;

    cout<<"\n";
    return 0;
}


BAINARY ITERATIVE:
#include <iostream>
using namespace std;

int binarySearch(int arr[], int l, int r, int x) {
    while (l <= r) {
        int m = l + (r - l) / 2;

        if (arr[m] == x)
            return m;

        if (arr[m] < x)
            l = m + 1;
        else
            r = m - 1;
    }
    return -1;
}

int main() {
    int arr[30], n,ele;
    cout << "Enter value of n:";
    cin >> n;

    cout << "Enter Array elements:";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout<<"Enter Search Element:";
    cin>>ele;

    int result = binarySearch(arr, 0, n-1, ele);
    if (result == -1)
        cout << "Element not Found:";
    else
        cout << "Element Found at index " << result;

    cout<<"\n";
    return 0;
}



BAINARY RECURSIVE:
#include <iostream>
using namespace std;

int binarySearch(int arr[], int l, int r, int x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;

        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);

        return binarySearch(arr, mid + 1, r, x);
    } 
    return -1;
}

int main() {
    int arr[30], n,ele;
    cout << "Enter value of n:";
    cin >> n;

    cout << "Enter Array elements:";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout<<"Enter Search Element:";
    cin>>ele;

    int result = binarySearch(arr, 0, n-1, ele);
    if (result == -1)
        cout << "Element not Found:";
    else
        cout << "Element Found at index " << result;

    cout<<"\n";
    return 0;
}




ADJACENCY LIST:
#include<iostream>
 
using namespace std;
 
int main() {
	int i, v, e, j, count;
  
	cout<<"Enter the number of vertexes of the graph: ";
	cin>>v;
	cout<<"\nEnter the number of edges of the graph: ";
	cin>>e;
	int edge[e][2];
  
	for(i = 0; i < e; i++) {
		cout<<"\nEnter the vertex pair for edge "<<i+1;
		cout<<"\nV(1): ";
		cin>>edge[i][0];
		cout<<"V(2): ";
		cin>>edge[i][1];
	}
  
	cout<<"\n\nThe adjacency list representation for the given graph: ";
	for(i = 0; i < v; i++) {
		count = 0; 
		cout<<"\n\t"<<i+1<<"-> { ";
		for(j = 0; j < e; j++) {
			if(edge[j][0] == i+1) {
				cout<<edge[j][1]<<"  ";
				count++;
			} else if(edge[j][1] == i+1) {
				cout<<edge[j][0]<<"  ";
				count++;
			} else if(j == e-1 && count == 0)
				cout<<"Isolated Vertex!";
		}
		cout<<" }";
	}
}