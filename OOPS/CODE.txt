WEEK 2
2. Write a C++ program to generate the first n terms of the Fibonacci sequence.
#include <iostream>
using namespace std;

int main() {
    int n;
    system("clear");

    cout << "Enter decimal number:";
    cin >> n;

    cout<<"Bainary Number:";
    int arr[20], i = 0;
    for (i = 0; n > 0; i++) {
        arr[i] = n % 2;
        n = n / 2;
    } 
    for (int j = i - 1; j >= 0; j--)
        cout << arr[j];

    cout<<"\nEnter Bainary number:";
    cin>>n;

    int dec = 0, rem, base = 1;
    while (n) {
        rem = n % 10;
        n /= 10;
        dec += rem * base;
        base *= 2;
    }
    cout<<"Decimanl Number:"<<dec;

    cout << endl;
}



3. Write a C++ program to generate prime numbers between two limits.

#include <iostream>
using namespace std;


int main() {
        int lower,upper;
        system("clear");
        cout<<"Enter lower and upper bound:";
        cin>>lower>>upper;
        int count = 0;
        cout<<"Prime numbers:";
        for(int i=lower;i<=upper;i++) {
                int divided = 0;
                for(int j=2;j<i;j++) {
                        if(i % j == 0) {
                                divided = 1;
                        }
                }
                if(divided == 0){
                        count = 1;
                        cout<<i<<" ";
                }
        }
        if(count == 0)
                cout<<"None";
        cout<<endl;
}


WEEK3:
Given that an EMPLOYEE structure contains following members. Data members: Employee_Number, Employee_Name, Basic, DA, IT, Net_Sal. Write functions: To read the data, calculate net salary and display the net salary. Write a C++ program to read the data of N employees and compute Net salary of each employee. (DA= 12% of Basic and Income Tax (IT) = 18% of the gross salary).


#include <iostream>
using namespace std;

int n;

struct employee
{
    int empNo;
    char empName[20];
    int basic;
    int DA;
    int IT;
    int grossSal;
    int netSal;
} emp[10];

void readData()
{
    cout << "Enter no of employees:";
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        cout << "\nEnter emp No:";
        cin >> emp[i].empNo;

        cout << "Enter Employee Name:";
        cin >> emp[i].empName;

        cout << "Enter Basic:";
        cin >> emp[i].basic;
    }
}

void calculateNetSal()
{
    for (int i = 0; i < n; i++)
    {
        emp[i].DA = emp[i].basic * 0.12;
        emp[i].grossSal = (emp[i].basic + emp[i].DA);
        emp[i].IT = emp[i].grossSal * 0.18;
        emp[i].netSal = emp[i].grossSal - (emp[i].DA + emp[i].IT);
    }
}
void displayData()
{
    for (int i = 0; i < n; i++)
    { 
        cout<<"\n--------------------------------------";

        cout << "\nEmp No:" << emp[i].empNo;
        cout << "\nEmp Name:" << emp[i].empName;
        cout << "\nBasic Sal:" << emp[i].basic;
        cout << "\nNet Sal:" << emp[i].netSal;
        cout << "\nDA:" << emp[i].DA;
        cout << "\nIT:" << emp[i].IT;
    }
}
int main()
{
    system("clear");
    readData();
    calculateNetSal();
    displayData();
    cout << endl;
}

WEEK4:
Create a flight class that has private data members: flight number (integer), destination (characters), distance (float), fuel (float).

#include <iostream>
using namespace std;

class Flight
{
    int flightNumber;
    char destination[30];
    float distance, fuel;

    void calculateFuel()
    {
        if (distance <= 1000)
            fuel = 500;
        else if (distance > 1000 && distance <= 2000)
            fuel = 1100;
        else if (distance > 2000)
            fuel = 2200;
    }

    public:
        Flight() : distance(500) {}

        void displayInfo()
        {
            cout<<"\n----------------------------------";
            cout<<"\nFlight No:"<<flightNumber;
            cout<<"\nDestination:"<<destination;
            cout<<"\nDistance:"<<distance<<".Km";
            cout<<"\nFuel:"<<fuel<<".Liters\n";
        }

        void imformationEntry()
        {
            cout << "Enter Flight No:";
            cin >> flightNumber;
            cout << "Enter Destination:";
            cin >> destination;
            cout << "Enter Distance:";
            cin >> distance;

            calculateFuel();
            displayInfo();
        }
};

int main()
{
    Flight f1;
    system("clear");
    f1.imformationEntry();
    return 0;
}



Write necessary class and member function definitions for a cricket player object. The program should accept the details from user (maximum 10 objects). The details

#include <iostream>
using namespace std;

int playerCount = 0;
class Player
{
    char playerCode[10], name[20];

public:
    int matchPlayed, totalRuns, notOut;

    Player()
    {
        matchPlayed = 0;
        totalRuns = 0;
        notOut = 0;
    }
    void readData()
    {
        cout << "Enter Player Code:";
        cin >> playerCode;
        cout << "Enter Player Name:";
        cin >> name;
        cout << "Enter number of matches played:";
        cin >> matchPlayed;
        cout << "Enter Total runs:";
        cin >> totalRuns;
        cout << "Enter number of times not out:";
        cin >> notOut;
    }

    friend void average(Player p)
    {
        float value = (float) p.totalRuns / (p.matchPlayed - p.notOut);
        cout << "\nAverage of player " << p.name << " is: " << value;
    }

    friend void average(Player p[], int n)
    { 
        for (int i = 0; i < n; i++)
        {
            average(p[i]);
        } 
    }

    friend void displayData(Player p[], int n)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (p[i].totalRuns > p[j].totalRuns)
                {
                    Player p1;
                    p1 = p[i];
                    p[i] = p[j];
                    p[j] = p1;
                }
            }
        }

        cout << "\n-----------------------------------------------------------------------------------";
        cout << "\nPlayerCode\tPlayerName\tMatchesPlayed\tTotal Runs\tNot Out";
        cout << "\n-----------------------------------------------------------------------------------";

        for (int i = 0; i < n; i++)
        {
            cout << "\n"
                 << p[i].playerCode;
            cout << "\t\t" << p[i].name;
            cout << "\t\t" << p[i].matchPlayed;
            cout << "\t\t" << p[i].totalRuns;
            cout << "\t\t" << p[i].notOut;
        }
        cout << "\n-----------------------------------------------------------------------------------";
    }
};

int main()
{
    Player p[10];
    system("clear");

    int choice;
    do
    {

        cout << "\n-----------------------------------------------------------------------------------";
        cout << "\n1.Enter player details";
        cout << "\n2.Display average runs of single player";
        cout << "\n3.Average runs of all players";
        cout << "\n4.Display list of all players sorted order";
        cout << "\n5.Exit\n";

        cin >> choice;

        if (choice == 1)
            p[playerCount++].readData();
        else if (choice == 2)
        {
            int value;
            cout << "Enter player number:";
            cin >> value;
            average(p[value]);
        }
        else if (choice == 3)
        {
            average(p, playerCount);
        }
        else if (choice == 4)
        {
            displayData(p, playerCount);
        }
        else
        {
            cout << "Exit";
        }

    } while (choice != 5);
}



Write a C++ program to create a class called Complex and implement the following by overloading functions that return the complex number.
#include<iostream>
using namespace std;

class Complex {
        int real,img;

        public:
                void insert() {
                        cout<<"\nEnter real value:";
                        cin>>real;
                        cout<<"Enter img value:";
                        cin>>img;
                }

                friend Complex add(int, Complex);

                friend Complex add(Complex,Complex);

                void display() {
                        cout<<"\nReal number:"<<real;
                        cout<<"\nImg number:"<<img;
                }

};

Complex add(int s1,Complex s2) {
        Complex c1;
        c1.img = s2.img + s1;
        c1.real = s2.real + s1;

        return c1;
}

Complex add(Complex s1,Complex s2) {
        Complex c1;
        c1.real = s1.real + s2.real;
        c1.img = s1.img + s2.img;

        return c1;
}

int main() {
        Complex c1;
        Complex c2;
        Complex c3,c4;

        system("clear");

        c1.insert();
        c2.insert();

        int value;
        cout<<"\nEnter integer value:";
        cin>>value;

        c3 = add(value,c1);
        c4 = add(c1,c2);

        cout<<"\nAdd s1 integer,s2 object";
        c3.display();

        cout<<"\n\nAdd s1 object,s2,object";
        c4.display();

        cout<<endl;
        return 0;
}


WEEK5:
Write a C++ program to create a class called Matrix using 2-Dimensional array of integers. Implement the following by overloading the operator == which checks the compatibility of the two matrices to be added and subtracted. Perform the following by overloading + and â€“ operators.
 
//Date: 07-01-2022
//Program: Write a C++ program to create a class called Matrix using 2-Dimensional array of integers
#include<iostream>
using namespace std;

class Matrix {
    int m,n;
    int arr[20][20];

    public:
        void insert() {
            cout<<"Enter value for row:";
            cin>>n;

            cout<<"Enter value for column:";
            cin>>m;
            cout<<"Enter Matrix values:";
            for(int i=0;i<n;i++) {
                    for(int j=0;j<m;j++) {
                            cin>>arr[i][j];
                    }
            }

        }
        friend void display(Matrix mat) {
            cout<<endl;
            for(int i=0;i<mat.n;i++) {
                    for(int j=0;j<mat.m;j++) {
                            cout<<mat.arr[i][j]<<"  ";
                    }
                    cout<<endl;
            }
        }
	
	int operator == (Matrix m2) {
            	if(n != m2.n || m != m2.m) {
                	return 0;
		} else {
			return 1;
		}
	}
        Matrix operator + (Matrix m2) {
                Matrix mat;
                mat.n = n;
                mat.m = m;

                for(int i=0;i<n;i++) {
                        for(int j=0;j<m;j++) {
                                mat.arr[i][j] = arr[i][j] + m2.arr[i][j];
                        }
                        cout<<endl;
                }
                cout<<"\nAddition of matrix:";
                display(mat);
                return mat;
        }
    
        Matrix operator - (Matrix m2) {
                Matrix mat;
                mat.n = n;
                mat.m = m;

                for(int i=0;i<n;i++) {
                        for(int j=0;j<m;j++) {
                                mat.arr[i][j] = arr[i][j] - m2.arr[i][j];
                        }
                        cout<<endl;
                }
                cout<<"\nSubraction of matrix:";
                display(mat);
                return mat;
        }
};

int main() {
    	system("clear");

    	Matrix m1,m2;
    	m1.insert();
    	m2.insert();

    	Matrix m3;
    	Matrix m4;

	if(m1 == m2) {
    		m3 = m1 + m2;
    		m4 = m1 - m2;
	} else {
		cout<<"Matrix cannot be added or subracted";
	}

    	cout<<endl;
    	return 0;
}


Write a C++ program to overload the relational operators <= to compare 2 objects of my_String class
 
//Date: 07-01-2022
//Program Name:Write a C++ program to overload the relational operators <= to compare 2 objects of my_String class

#include<iostream>
using namespace std;

class MyString {
    char str[20];
    public:
            MyString() {
                    cout<<"Enter String value:";
                    cin>>str;
            }
            int operator <= (MyString str2) {
		int i=0;
		while(str[i] != '\0' || str2.str[i] != '\0') {
			if(str[i] == str2.str[i]) {
				i++;
				continue;	
			}
			if(str[i] < str2.str[i]) 
				return 1;
			else
				return 0;
				
		}	
		return 1;
            }
};
int main() {
    system("clear");

    MyString str1;
    MyString str2;

    if(str1 <= str2) {
            cout<<"\nString 1 is less than or equal to String 2";
    } else {
            cout<<"\nString 1 is greator than String 2";
    }
    cout<<endl;

    return 0;
}



WEEK6:
Design the classes using following hierarchical inheritance teaching. Each class has member functions accept and display. Write a program to accept details of n instructors and display the details.

//Date: 07-01-2022
//Program Name: Design the classes using following hierarchical inheritance teaching. Each class has member functions accept and display.


#include<iostream>
using namespace std;

class Person {
	int id;
	char name[20];
		
	public:
		void accept() {
			cout<<"Enter Id:";
			cin>>id;
			cout<<"Enter Name:";
			cin>>name;
		}
		void display() {
			cout<<"\nId:"<<id;
			cout<<"\nName:"<<name;
		}
};

class Teaching:public Person {
	char subject[20];
	char name[20];
		
	public:	
		void accept() {
			cout<<"Enter Subject Name:";
			cin>>subject;
			cout<<"Enter Name:";
			cin>>name;
		}
		void display() {
			cout<<"\nSubject:"<<subject;
			cout<<"\nName:"<<name;
		}
};

class NonTeaching:public Person {
	char dept[10];
	
	public:
		void accept() {
			cout<<"Enter Department:";
			cin>>dept;
		}
		void display() {
			cout<<"\nDepartment:"<<dept;
		}


};

class Instructor:public Person {
	char course[20];
	public:
		void accept() {
			Person::accept();
			cout<<"Enter Cource Name:";
			cin>>course;
		}
		
		void display() {
			Person::display();
			cout<<"\nCourse:"<<course;
		}
};

int main() {
	Instructor obj[10];
	int n;
	system("clear");
	cout<<"Enter number of instructors:";
	cin>>n;

	for(int i=0;i<n;i++) {
		obj[i].accept();
	}		

	for(int i=0;i<n;i++) {
		cout<<"\n------------------------";
		obj[i].display();
	}
} 


A new scheme of evaluation of studentâ€™s performance is formulated that gives weightage for sports. The relationships of different classes and derived classes are given below.

//Date: 13-JAN-2022
//Pr
#include<iostream>
using namespace std;

class Student {
	public:
		char name[10];
		int id;

		void insertDetails() {
			cout<<"Enter id & name:";
			cin>>id>>name;
		}	
};

class Marks:public virtual Student {
	public:
		int marks[5];

		void insertMarks() {
			cout<<"Enter marks in 5 subjects:";
			for(int i=0;i<5;i++) {
				cin>>marks[i];
			}
		}
};

class Sports:public virtual Student {
	public:
		int sportsMarks;

		void insertSportsMark() {
			cout<<"Enter Sports Marks:";
			cin>>sportsMarks;
		}
};

class Result:public Sports,public Marks {
	int total = 0;
	public:
		void calculateMarks() {
			for(int i=0;i<5;i++) {
				total+=marks[i];
			}
			total += sportsMarks;
		}
		void display() {	
			cout<<"\nId:"<<id;
			cout<<"\nName:"<<name;
			cout<<"\nMarks:";
			for(int i=0;i<5;i++) {
				cout<<marks[i]<<" ";
			}
			cout<<"\nSports Marks:"<<sportsMarks;
			cout<<"\nTotal Marks:"<<total;
			cout<<"\nPercentage:"<<total/6;
		}	
};
int main() {
	system("clear");
	Result r;
	r.insertDetails();
	r.insertMarks();
	r.insertSportsMark();
	r.calculateMarks();
	r.display();
	cout<<endl;
}



WEEK7:
Consider the following class hierarchy:
Write an interactive C++ program to model the above relationship. Assume proper data members and member functions for each class.

#include<iostream>
using namespace std;

class Employee {
	public:
        char name[10];
        virtual void accept() {
			
		}	
		virtual void display() {
			
		}		
};

class Education {
	public:
        char education[20];

        virtual void accept() {
			
		}
		virtual void display() {
			
		}	
};

class Laborer:public Employee {
	int workHours;
	public:
		void accept() {
            cout << "Enter Name:";
            cin >> name; 
            cout<<"Enter Works Hours:";
			cin>>workHours;
		}
		void display() {
            cout <<"\nName:" << name;
            cout<<"\nWork Hours:"<<workHours;
		}
};

class Scientist: public Employee,public Education {
	char expertise[10];
	public:
		void accept() {
            cout << "Enter Name:";
            cin >> name; 
            cout << "Enter Education:";
            cin >> education;
            cout<<"Enter Expertise:";
			cin>>expertise;
		}
		void display() {
            cout << "\nName:" << name;
            cout << "\nEducation:" << education;
            cout<<"\nExpertise:"<<expertise;
		}
};

class Manager: public Employee,public Education {
	char dept[10];
	public:
		void accept() {
            cout << "Enter Name:";
            cin >> name; 
            cout << "Enter Education: ";
            cin >> education;
            cout<<"Enter Department:";
			cin>>dept;
		}
		void display() {
            cout << "\nName:" << name; 
            cout << "\nEducation:" << education;
            cout<<"\nDepartment:"<<dept;
		}
};

int main() {
	Employee *emp;
    Scientist s;
    emp = &s;
    cout << "\n---Scientist\n";
    emp->accept();
    emp->display();

    Laborer l;
    emp = &l;
    cout << "\n---Laborer\n";
    emp->accept();
    emp->display();

    Manager m;
    emp = &m;
    cout << "\n---Manager\n";
    emp->accept();
    emp->display();
}



Create a base class called shape. Use this class to store two double type values that could be used to compute the area of figures. Derive two classes called triangle and rectangle from shape. Add to the base class, a member function get_data() to initialize base class data members and another member function display_area() to compute and display the area of figures. Make display_area() as a virtual function and re-define this function in the derived classes to suit their requirements. Using

//Date: 14-JAN-2022

#include<iostream>
using namespace std;

class Shape {
	protected:
		int var_a,var_b;
	public:
		Shape(){ }

		Shape(int x,int y) {
			var_a=x;
			var_b=y;
		}
		virtual void getArea() {
			cout<<"BASE CLASS GET AREA";
		}
};

class Triangle : public Shape {
	public:
		Triangle(int x,int y) : Shape(x,y) {	}
		void getArea() {
			float value =(float) 0.5 * var_a * var_b;
			cout<<"\nArea of Triangle:"<<value;
		}

};


class Rectangle : public Shape {
	public:
		Rectangle(int x,int y) : Shape(x,y) {}
		void getArea() {
			int value = var_a * var_b;
			cout<<"\nArea of Rectangle:"<<value;
		}
};

int main() {
	system("clear");

	int x,y;
	cout<<"Enter 2 value:";
	cin>>x>>y;

	Shape *s;

	Triangle t(x, y);	
	s = &t;
	s->getArea();
	
	Rectangle r(x, y);
	s = &r;
	s->getArea();

	cout<<endl;	
	return 0;
}

