Write a program using pipe to send a string from parent to child in order to print number of characters and digits in the string.


#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

#define MAXSIZE 16

int main() {
	char str[MAXSIZE];
	char inBuf[MAXSIZE];
 
 	int p[2], i,digit = 0,character=0;

	pipe(p);
	int pid = fork();

	if(pid > 1) {
		printf("Enter String:");
		scanf("%s",str);
 		write(p[1], str, MAXSIZE); 
	} else if(pid == 0) {

		read(p[0],inBuf,MAXSIZE);		

		size_t i = 0;	
		while(inBuf[i] != '\0') { 
			if((int) inBuf[i] >= 48 && (int) inBuf[i] <= 57)	
				digit++;
			else
				character++;
			i++;
		}

		printf("DIGIT COUNT: %d", digit);
		printf("\nCHAR COUNT: %d", character);
	}
	printf("\n");
}


Write a program using pipe to accept integer at parent and pass it to child. Child should check that number is Armstrong number or not and accordingly send a strong message - YES or NO to parent.

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>

#define MSGSIZE 16

int main() { 
 	int value,readValue,num,result=0,rem,outputValue;
	int p[2];
	int q[2];
	 

	pipe(p);
	pipe(q);
	int pid = fork();

	if(pid > 0) {
		printf("Enter the value:");
		scanf("%d",&value);
		write(p[1], &value, sizeof(int));  
		wait(0);
		close(p[1]);
	
		read(q[0], &outputValue, sizeof(int));
		if(outputValue == 1) 
			printf("ArmStrong Number");	
		else
			printf("Not ArmStrong Number");
		
		
	} else { 
		read(p[0], &readValue, sizeof(int));
		
		num = readValue;
		while (num != 0) { 
			rem = num % 10;
			result += rem * rem * rem;
			num /= 10;
		}

		outputValue = result == readValue ? 1 : 0;
		write(q[1], &outputValue, sizeof(int));  
		
	} 
	printf("\n");
}

Write a program using pipe to accept an array of integers at parent and pass it to child.  Child will pick only even numbers and return array of even numbers to parent.

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>

#define MSGSIZE 16

int main() { 
 	int n,count=0,i;
		
	printf("Enter the value of n:");
	scanf("%d",&n);

	int arr[10],even[10];

	int p[2];
	int q[2];

	pipe(p);
	pipe(q);
	int pid = fork();

	if(pid > 0) {
		printf("Array Elements:");
		for(i=0;i<n;i++) {
			scanf("%d",&arr[i]);
		}

		write(p[1], &n, sizeof(int));		
		write(p[1], &arr, sizeof(int) * n); 
 

		wait(0);
		close(p[1]);
	
		read(q[0], &count, sizeof(int));
		read(q[0], &even, sizeof(int) * count);

		printf("Even Numbers:");
		for(i =0;i<count;i++) {
			printf("%d ",even[i]);
		}
		
	} else { 
		read(p[0], &n, sizeof(int));
		read(p[0], &arr, sizeof(int) * n);

		for(i=0;i<n;i++) {
			if(arr[i] % 2 == 0) 
				even[count++] = arr[i];
	
		} 

		write(q[1], &count, sizeof(int));  		
		write(q[1], &even, sizeof(int) * count);  
	} 
	printf("\n");
}

Write a program using pipe to accept details of a student such as - RegNo, Mark1, Mark2, Mark3 and send it to child. Child will find average and accordingly assign Grades (A+, A, B, C, D, E, F- assume some criteria) and return grade to Parent.

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>

#define MSGSIZE 16

struct student {
	int regno,m1,m2,m3;
};
int main() { 
 	int n,total=0,i,avg;
	char* grade;
	char readGrade[2];
	struct student s1;

	int p[2];
	int q[2];

	pipe(p);
	pipe(q);
	int pid = fork();

	if(pid > 0) {
		printf("Enter Student RegNo, M1,M2,M3:");
		scanf("%d%d%d%d",&s1.regno,&s1.m1,&s1.m2,&s1.m3);		
 
		write(p[1], &s1, sizeof(int) * 4); 
  			
		read(q[0], readGrade, 2); 
		printf("Grade: %s", readGrade);
	} else { 
		read(p[0], &s1, sizeof(int) * 4); 
		total = s1.m1 + s1.m2 + s1.m3;
		avg = total / 3;
		if(avg > 90) 
			grade = "A+";
		else if(avg > 80)
			grade = "A";
		else if(avg > 70)
			grade = "B";
		else if(avg > 60)
			grade = "C";
		else if(avg > 50)
			grade = "E";
		else 
			grade = "F";
		 
		write(q[1], grade, 2);  		
		
	} 
	printf("\n");
}


5. Write a program using pipe to accept a matrix on n X n and pass it to child. Child will multiply each element of user choice to each element return new matrix back to parent
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

#define MSGSIZE 16

int main()
{
    int n, count = 0, i, j,ch;

    printf("Enter the value of n:");
    scanf("%d", &n);

    int arr[10][10];

    int p[2];
    int q[2];

    pipe(p);
    pipe(q);
    int pid = fork();

    if (pid > 0)
    {
        printf("Array Elements:");
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++) {
                scanf("%d", &arr[i][j]);
            }
        }

        write(p[1], &n, sizeof(int));
        write(p[1], &arr, sizeof(int) * n * n);

        wait(0);
        close(p[1]);

        read(q[0], &count, sizeof(int));
        read(q[0], &arr, sizeof(int) * count * count);

        printf("Even Numbers:\n");
        for (i = 0; i < count; i++)
        {
            for (j = 0; j < count; j++) {
                printf("%d ", arr[i][j]);
            }
            printf("\n");
        }
    }
    else
    {
        read(p[0], &n, sizeof(int));
        read(p[0], &arr, sizeof(int) * n * n);

        printf("Enter value of to multiply:");
        scanf("%d", &ch);

        for (i = 0; i < n; i++)
        {
            for (i = 0; i < n; i++) {
                arr[i][j] = arr[i][j] * ch;
            } 
        }
        write(q[1], &n, sizeof(int));
        write(q[1], &arr, sizeof(int) * n * n); 
    }
    printf("\n");
}




6. Write a program using pipe to accept a string and pass it to child. Child will check the string whether it is palindrome or not. If palindrome then return message PALLINDROME otherwise NOT PALLINDROME to Parent.
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

#define MAXSIZE 16

int main()
{
    char str[MAXSIZE];
    char inBuf[MAXSIZE];
    char outputStr[20];

    int length,flag;
    int p[2], i;
    int q[2];

    pipe(p);
    pipe(q);

    int pid = fork();

    if (pid > 1) {
        printf("Enter String:");
        scanf("%s", str);
        write(p[1], str, MAXSIZE);

        read(q[0], &outputStr, MAXSIZE);

        printf("OUTPUT: %s", outputStr);
    } else if (pid == 0) {

        read(p[0], inBuf, MAXSIZE);
        length = strlen(inBuf);
        for (i = 0; i < length; i++) {
            if (inBuf[i] != inBuf[length - i - 1]) {
                flag = 1;
                break;
            }
        }

        if (flag) {
           strcpy(outputStr, "NOT PALINDROME");
        } else {
           strcpy(outputStr, "PALINDROME");
        }

        write(q[1], &outputStr, MAXSIZE);
    }
    printf("\n");
}




